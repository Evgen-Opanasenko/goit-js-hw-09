{"version":3,"sources":["js/03-promises.js"],"names":["refsForm","document","querySelector","submitHandler","e","preventDefault","delay","step","amount","makeFormData","currentTarget","position","createPromise","then","console","log","catch","form","finalData","formData","FormData","key","value","entries","alert","shouldResolve","Math","random","promise","Promise","resolve","reject","setTimeout","addEventListener"],"mappings":";AAAA,MAAMA,EAAWC,SAASC,cAAc,SAElCC,EAAgBC,IACpBA,EAAEC,iBACE,IAAA,MAAEC,EAAF,KAASC,EAAT,OAAeC,GAAWC,EAAaL,EAAEM,eAExC,IAAA,IAAIC,EAAW,EAAGA,GAAYH,EAAQG,GAAY,EAErDC,EAAcD,EAAUL,GACrBO,KAAK,EAAGF,SAAAA,EAAUL,MAAAA,MACjBQ,QAAQC,2BAA2BJ,QAAeL,SAEnDU,MAAM,EAAGL,SAAAA,EAAUL,MAAAA,MAClBQ,QAAQC,0BAA0BJ,QAAeL,SAErDA,GAASC,GAKb,SAASE,EAAaQ,GACdC,MAAAA,EAAY,GACZC,EAAW,IAAIC,SAASH,GACzB,IAAA,MAAOI,EAAKC,KAAUH,EAASI,UAAW,CACzC,IAACD,EAEH,YADAE,MAAM,kCAGRN,EAAUG,IAAQC,EAEbJ,OAAAA,EAGT,SAASN,EAAcD,EAAUL,GACzBmB,MAAAA,EAAgBC,KAAKC,SAAW,GAW/BC,OAVS,IAAIC,QAAQ,CAACC,EAASC,KACpCC,WAAW,KACLP,EACFK,EAAQ,CAAEnB,SAAAA,EAAUL,MAAAA,IAEpByB,EAAO,CAAEpB,SAAAA,EAAUL,MAAAA,KAEpBA,KAcPN,EAASiC,iBAAiB,SAAU9B","file":"03-promises.70cb334b.js","sourceRoot":"../src","sourcesContent":["const refsForm = document.querySelector('.form');\n\nconst submitHandler = e => {\n  e.preventDefault();\n  let { delay, step, amount } = makeFormData(e.currentTarget);\n\n  for (let position = 1; position <= amount; position += 1) {\n    // delay = delay + position * step;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n\n  // form.reset();\n};\nfunction makeFormData(form) {\n  const finalData = {};\n  const formData = new FormData(form);\n  for (const [key, value] of formData.entries()) {\n    if (!value) {\n      alert('Please fill in all the fields!');\n      return;\n    }\n    finalData[key] = +value;\n  }\n  return finalData;\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nrefsForm.addEventListener('submit', submitHandler);\n"]}